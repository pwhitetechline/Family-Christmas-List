---
import Layout from '../../layouts/Layout.astro';
import WishlistItem from '../../components/wishlist/WishlistItem';
import prisma from '../../lib/db';
import { verifyToken } from '../../lib/auth';

const { id } = Astro.params;
const userId = await verifyToken(Astro.request);

if (!userId) {
  return Astro.redirect('/login');
}

const wishlist = await prisma.wishlist.findUnique({
  where: { id },
  include: {
    items: true,
    user: {
      select: {
        name: true,
      },
    },
  },
});

if (!wishlist) {
  return Astro.redirect('/wishlists');
}
---

<Layout title={`${wishlist.title} - Family Christmas List`}>
  <div class="max-w-4xl mx-auto py-8">
    <div class="flex justify-between items-center mb-8">
      <div>
        <h1 class="text-3xl font-bold text-christmas-red">
          {wishlist.title}
        </h1>
        <p class="text-gray-600 mt-1">
          Created by {wishlist.user.name}
        </p>
      </div>
      
      {wishlist.userId === userId && (
        <button
          id="newItemBtn"
          class="px-4 py-2 bg-christmas-green text-white rounded-lg hover:bg-opacity-90"
        >
          Add New Item
        </button>
      )}
    </div>

    <div id="itemForm" class="mb-8 hidden">
      <form id="newItemForm" class="space-y-4">
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="name" class="block text-sm font-medium text-gray-700">
              Item Name
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-christmas-red focus:ring-christmas-red"
            />
          </div>

          <div>
            <label for="price" class="block text-sm font-medium text-gray-700">
              Price (optional)
            </label>
            <input
              type="number"
              id="price"
              name="price"
              step="0.01"
              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-christmas-red focus:ring-christmas-red"
            />
          </div>
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-700">
            Description (optional)
          </label>
          <textarea
            id="description"
            name="description"
            rows="3"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-christmas-red focus:ring-christmas-red"
          ></textarea>
        </div>

        <div>
          <label for="url" class="block text-sm font-medium text-gray-700">
            URL (optional)
          </label>
          <input
            type="url"
            id="url"
            name="url"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-christmas-red focus:ring-christmas-red"
          />
        </div>

        <div>
          <label for="priority" class="block text-sm font-medium text-gray-700">
            Priority (1-5)
          </label>
          <select
            id="priority"
            name="priority"
            class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-christmas-red focus:ring-christmas-red"
          >
            <option value="1">1 - Low</option>
            <option value="2">2</option>
            <option value="3">3 - Medium</option>
            <option value="4">4</option>
            <option value="5">5 - High</option>
          </select>
        </div>

        <button
          type="submit"
          class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-christmas-red hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-christmas-red"
        >
          Add Item
        </button>
      </form>
    </div>

    <div class="space-y-4">
      {wishlist.items.map((item) => (
        <WishlistItem
          item={item}
          onDelete={async (itemId) => {
            try {
              await fetch(`/api/wishlists/items/${itemId}`, {
                method: 'DELETE',
              });
              window.location.reload();
            } catch (error) {
              console.error('Delete error:', error);
            }
          }}
          client:load
        />
      ))}

      {wishlist.items.length === 0 && (
        <p class="text-center text-gray-600">
          No items in this wishlist yet. Add your first item!
        </p>
      )}
    </div>
  </div>

  <script define:vars={{ wishlistId: id }}>
    const newItemBtn = document.getElementById('newItemBtn');
    const itemForm = document.getElementById('itemForm');
    const newItemForm = document.getElementById('newItemForm');

    if (newItemBtn && itemForm) {
      newItemBtn.addEventListener('click', () => {
        itemForm.classList.toggle('hidden');
      });
    }

    if (newItemForm) {
      newItemForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch(`/api/wishlists/${wishlistId}/items`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });

          if (response.ok) {
            window.location.reload();
          }
        } catch (error) {
          console.error('Add item error:', error);
        }
      });
    }
  </script>
</Layout>
